- content_for(:title) { 'Ruby Cheatsheet' }
.row.cheatsheet ng-app='chapter'
  .col-lg-4.col-sm-4.col-xs-4
    table
      tr
        th Local variables
      tr
        td
          code-example type='ruby'
            | x = 5
              name = "John"
              first_name = "John"
              default = true
    table
      tr
        th Strings
      tr
        td
          strong String creation methods
          code-example type='ruby'
            | str = ''  #=> new empty string
              str = 'some text'  #=> new string 'some text'

          strong String manipulation methods
          code-example type='ruby'
            | s1 = "some text"
              s1.capitalize  #=> "Some text"
              s1.upcase  #=> "SOME TEXT"
              s1.length  #=> 9
              s1.reverse  #=> "txet emos"

              s2 = "Other Text"
              s2.downcase  #=> "other text"
              s2.count("e")  #=> 2
              s2.gsub("e", "A")  #=> "OthAr TAxt"

              s3 = "  piece of text  "
              s3.strip  #=> "piece of text"
              s3.include?("piece")  #=> true
              s3.split  #=> ["piece", "of", "text"]

              s1 + s2  #=> "some textOther Text"

              # Get char by index:
              str = "oranges"
              str[3]  #=> "n"

              s4 = '35'
              s4.to_i  #=> 35 (to integer)
    table
      tr
        th Conditions
      tr
        td
          strong Simple conditions and flow control statements
          code-example type='ruby'
            | product = "Apples"
              if product == "Apples"
                puts "red"
              end
              #=> "red"

              # One-line replacement:
              puts "red" if product == "Apples" #=> "red"

              if product == "Oranges"
                puts "orange"
              else
                puts "red"
              end
              #=> "red"

              # One-line replacement:
              product == "Oranges" ? product == "Oranges" : puts "red"  #=> "red"

              if product == "Oranges"
                puts "orange"
              elsif product == "Grapes"
                puts "green"
              else
                puts "red"
              end
              #=> "red"

              product = "Oranges"
              case product
              when "Apples"
                puts "red"
              when "Bananas"
                puts "yellow"
              when "Oranges"
                puts "orange"
              else
                puts "unknown"
              end
              #=> "orange"
    table
      tr
        th Classes and instance variables
      tr
        td
          strong Definition
          code-example type='ruby'
            | class Book
                def initialize(name, pages)
                  @name = name
                  @pages = pages
                end

                def pages
                  @pages
                end
              end

          strong Create new object
          code-example type='ruby'
            | book = Book.new('Book', 100)
  .col-lg-4.col-sm-4.col-xs-4
    table
      tr
        th Arrays
      tr
        td
          strong Array creation methods
          code-example type='ruby'
            | arr = []  #=> new empty array
              arr = [1, 2, 'word', 3, {key: 'value'}]  #=> new array

          strong Array manipulation methods
          code-example type='ruby'
            | arr = [1, 2, 3, 4, 5, 6]
              arr[2]  #=> 3
              arr[2, 3]  #=> [3, 4, 5]
              arr.first  #=> 1
              arr.last  #=> 6
              arr.length  #=> 6
              arr.include?(3)  #=> true

              arr = [1, 2, 3, 4]
              arr.push(5)
              #=> [1, 2, 3, 4, 5]
              arr << 6
              #=> [1, 2, 3, 4, 5, 6]
              arr.shift
              #=> 1;
              arr
              #=> [2, 3, 4, 5, 6]
              arr.unshift(7)
              #=> [7, 2, 3, 4, 5, 6]

              [1, 2, 3].concat([4, 5, 6])
              #=> [1, 2, 3, 4, 5, 6]

              arr = [3, 6, 7, 3, 8, 9, 12, 3]
              arr.uniq  #=> [3, 6, 7, 8, 9, 12]
              arr.count(3)  #=> 3

              arr = [9, 0, 7, 3, 5, 4, 6, 1, 8, 2]
              arr.sort  #=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    table
      tr
        th String interpolation
      tr
        td
          code-example type='ruby'
            | name = 'John'
              puts "Hello, \#{name}!"  #=> "Hello, John!"
    table
      tr
        td
          strong Combined conditions
          code-example type='ruby'
            | # && - logical "AND"
              # || - logical "OR"
              # ! - logical "NOT"

              apples = 5
              oranges = 3
              if apples == 5 && oranges == 5
                puts "oranges: 5, apples: 5"
              elsif apples > 5 || oranges > 5
                puts "apples > 5 or oranges > 5"
              else
                puts "different number"
              end
              #=> "different number"

              if apples != 5
                puts "I don't have 5 apples"
              end

          strong Avoiding negate operator
          code-example type='ruby'
            | product = "Bananas"
              unless product == "Apples"
                puts "Not Apples, but still tasty"
              end
              #=> "Not Apples, but still tasty"
    table
      tr
        th Modules
      tr
        td
          strong Definition
          code-example type='ruby'
            | module Helpers
                def helper1
                end

                def helper2
                end
              end
    table
      tr
        th Type conversion
      tr
        td
          strong Strings to Integers conversion
          code-example type='ruby'
            | "12".to_i
              #=> 12 (data type - Fixnum)
              "abc12".to_i
              #=> 0 (data type - Fixnum)
              12.to_s
              #=> "12" (data type - String)

          strong Integers to Floats conversion
          code-example type='ruby'
            | 12.to_f
              #=> 12.0 (data type - Float)

  .col-lg-4.col-sm-4.col-xs-4
    table
      tr
        th Hashes
      tr
        td
          strong Hash creation methods
          code-example type='ruby'
            | hash = Hash.new  #=> new hash
              hash = {}  #=> new hash
              # new hash with 2 key/value pairs:
              hash = { "key1"=> "val1", "key2"=> "val2" }
              # new hash with 3 key/value pairs - keys are symbols:
              hash = { first_name: "John",
                       last_name: "Doe",
                       email: "johndoe@example.com" }

          strong Hash manipulation methods
          code-example type='ruby'
            | hash = { first_name: "John",
                       last_name: "Doe",
                       email: "johndoe@example.com" }
              hash.keys  #=> [:first_name,
                              :last_name,
                              :email]
              hash.values  #=> ["John",
                                "Doe",
                                "johndoe@example.com"]
              hash.length  #=> 3
              hash.has_key?(:first_name)  #=> true
              hash.has_value?("random text")  #=> false
              hash[:first_name]  #=> "John" # set new value
              hash[:dob] = "10/21/2001" # append new key, set value

              hash_one = { first_name: "John", last_name: "Doe" }
              hash_two = { first_name: "Jack", email: "jack@example.com" }
              hash_one.merge(hash_two)
              #=> { :first_name=>"Jack", :last_name=>"Doe", :email=>"jack@example.com" }

    table
      tr
        th Loops, iterators and code blocks
      tr
        td
          strong Loops
          code-example type='ruby'
            | for i in 0..5
                puts "i = \#{i}"
              end
              #=> i = 0, i = 1, ... , i = 5

              i = 0
              num = 5
              until i > num do
                puts "i = \#{i}"
                i += 1
              end
              #=> i = 0, i = 1, ... , i = 5

              # The example above can be overwritten to allow code
              # within the loop to be executed at least once till condition evaluation:

              i = 0
              num = 5
              begin
                puts "i = \#{i}"
                i += 1
              end until i > num
              # i = 0, i = 1, ..., i = 5

              i = 0
              num = 5
              while i < num do
                puts "i = \#{i}"
                i += 1
              end
              #=> i = 0, i = 1, ... , i = 5

              # The example above can be overwritten to allow code within
              # the loop to be executed at least once till condition evaluation:

              i = 0
              num = 5
              begin
                puts "i = \#{i}"
                i += 1
              end while i < num
              #=> i = 0, i = 1, ... , i = 4

    table
      tr
        td
          strong Iterators and code blocks
          code-example type='ruby'
            | 5.times { |i| puts "i = \#{i} " }
              #=> i = 0, ... , i = 4
              #=> 5

              products = ["Apple", "Banana", "Cucumber", "Orange"]
              products.each do |product|
                puts product
              end
              #=> Apple, Banana, Cucumber, Orange

              # The example above can be overwritten with one-row code block
              products.each { |product| puts product }
              #=> Apple, Banana, Cucumber, Orange

              arr = [1, 2, 3]
              arr.map { |item| puts item * 10 }
              #=> 10, 20, 30
